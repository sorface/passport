server:
  port: 8080

management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  endpoint:
    env:
      show-values: never
  endpoints:
    web:
      exposure:
        include: health,env
  observations:
    annotations:
      enabled: true

spring:
  application:
    name: sorface-passport-backend
    version: 1.0.0
  data.redis:
    client-type: jedis
    database: 5
    host: localhost
    port: 6379
    username: default
    password: testpassword
    jedis.pool:
      max-active: 100
      max-idle: 15

  datasource:
    url: "*****"
    username: "username"
    password: "password"
    driver-class-name: org.postgresql.Driver

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  session:
    timeout: 5d
    redis:
      flush-mode: on_save
      namespace: "passport"
      save-mode: on_set_attribute
      repository-type: indexed
      cleanup-cron: 0 * * * * *
      configure-action: notify_keyspace_events

  liquibase:
    contexts:
      - production
    change-log: migration/master.yaml
    enabled: true

  mail:
    username: '****************'
    password: '****************'
    port: 465
    host: smtp.yandex.ru
    properties:
      mail.transport.protocol: smtp
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.ssl.enable: true

  graphql:
    graphiql:
      enabled: false
      path: /graphiql

  security:
    oauth2:
      client:
        registration:
          github:
            client-name: github
            client-id: '************'
            client-secret: '************'

          yandex:
            client-name: yandex
            client-id: ee1bdcc325294d8a915db0ede6911b85
            client-secret: 0598eae2d4b1495f9b0b7d5923b11913
            authorization-grant-type: authorization_code
            provider: yandex
            redirect-uri: http://localhost:8080/login/oauth2/code/yandex

          twitch:
            client-name: twitch
            client-id: '************'
            client-secret: '************'
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - user:read:email
            provider: twitch
            redirect-uri: '************'

        provider:
          yandex:
            authorization-uri: https://oauth.yandex.ru/authorize
            token-uri: https://oauth.yandex.ru/token
            user-name-attribute: default_email
            userInfoUri: https://login.yandex.ru/info
          twitch:
            authorization-uri: https://id.twitch.tv/oauth2/authorize
            token-uri: https://id.twitch.tv/oauth2/token
            userInfoUri: https://api.twitch.tv/helix/users/
            user-info-authentication-method: GET
            user-name-attribute: data
  main:
    allow-circular-references: true

idp:
  cors:
    allowed-origins:
      - 'https://passport.sorface.ru'
      - 'https://api.gateway.sorface.ru'
      - 'https://interview.sorface.ru'
      - 'https://id.sorface.ru'
    allowCredentials: true

  cookie:
    session:
      domainpattern: '^.+?\.(\w+\.[a-z]+)$'
      path: '/'
      name: 'pspt_sid'
      httponly: true
      same-site: lax
      secure: true
      max-age: 365d

    csrf:
      name: 'x_csrf_token'
      domain: 'sorface.com'
      path: '/'
      httponly: false
      secure: true

    registration:
      name: 'registrationId'
      domain: 'sorface.com'
      path: '/'
      httponly: true
      secure: true
      maxage: 600

    otpexpat:
      name: 'otp_exp_time'
      domain: 'sorface.com'
      path: '/'
      httponly: false
      secure: false
      maxage: 120

  oidc:
    url: http://localhost:${server.port}

  endpoint:
    login-path: '/api/login'
    frontend:
      account-page: 'http://localhost:9030/account'
    login-page: 'http://localhost:9020'

logging:
  level:
    root: info
    by.sorface.idp: INFO
#    org.springframework.security.oauth2.server.authorization.web.OAuth2TokenEndpointFilter: trace
#    org.springframework.security.oauth2.server.authorization.authentication.OAuth2RefreshTokenAuthenticationProvider: trace
#    org.springframework.security.oauth2.server.authorization.oidc.web.authentication: trace
#    by.sorface.idp.dao.sql.repository.client: debug
  pattern:
    console: '%d{dd.MM.yyyy HH:mm:ss.SSS} %highlight(%-5level) [%thread] [${spring.application.name:},%X{traceId:-},%X{spanId:-}] %magenta([%file:%line]) : %msg%n'
  include-application-name: true

--- # spring development envs

spring:
  config:
    activate:
      on-profile: development

  graphql:
    graphiql:
      enabled: true

  datasource:
    url: "jdbc:h2:mem:idp;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE;MODE=PostgreSQL;"
    username: "username"
    password: "password"
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  liquibase:
    contexts:
      - development
    change-log: migration/master.yaml
    enabled: true

  h2:
    console:
      enabled: true
      path: /h2-console

--- # spring development envs

spring:
  config:
    activate:
      on-profile: sandbox

  mail:
    username: '****************'
    password: '****************'

  graphql:
    graphiql:
      enabled: true

  datasource:
    url: jdbc:postgresql://localhost:5444/passport
    username: user
    password: user
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        show_sql: false
        format_sql: false

  liquibase:
    contexts:
      - development
    change-log: migration/master.yaml
    enabled: true

  data.redis:
    port: 6380

idp:
  cors:
    allowed-origins:
      - 'http://localhost:9020'
      - 'http://localhost:9030'
      - 'http://localhost:9000'
      - 'http://localhost:3000'
    allowCredentials: true

  cookie:
    session:
      domainpattern: '^.+?\.(\w+\.[a-z]+)$'
      path: '/'
      name: 'pspt_sid'
      httponly: true
      same-site: lax
      secure: false
      max-age: 365d

    csrf:
      name: 'x_csrf_token'
      domain: 'localhost'
      path: '/'
      httponly: false
      secure: false
      same-site: lax

    registration:
      name: 'registrationId'
      domain: 'localhost'
      path: '/'
      httponly: true
      secure: false
      maxage: 600

    otpexpat:
      name: 'localhost'
      domain: 'sorface.com'
      path: '/'
      httponly: false
      secure: false
      maxage: 120

# development jwks keystore

security:
  jwks:
    keystore: |
      {
        "p": "t9HEGrHBpFlukaAEHqAuOji6DtT-zgBNP-jb8R1PJ0E3Xr2Tcty70Ty7gJVlGPnBN9GX1RTnTLiy2TkrtKOFAmrDeMu8WOjdGfiE8LmhXeQnuMkwOEUI6lmcPFZWhbrQFk65my5pMK9qLJBbCI8BQCXqgSLEEh4A18iUtj26jj8",
        "kty": "RSA",
        "q": "2Myt9o9gSGrDXZdzu4Ixgz4nF2cDhtY8MrllbPUjwQayoNjDh_JjgtUXdhHTMgHD9u-E0yCX8BoR3vs2KRP6laaGrX5hpL3TkcZmUTM9lFMluU8fpVG9MOjq6MCojp3VwjOyM1r3LZ9yAUYG7RjooCDhxi9XvSW6oXF-zfn5Oek",
        "d": "DGe3IMPh0PA00yjbUns5mjlrSqvI9y5TyNHZFc9qVNKEIp7dErwB2kxhD1PeMqx9rRhKk0xYiZokvYHspYdPF4qFhVrJFU3_-O8AeC_JnK0hdqnYKaLIwmlA4JHqvjlFEJWClU5M4OZ7p0SyxrsCvvent9ALyP8En_nBuf4p4vhpPpOzsF32jjwqw266qhCnBpI84Nct93HPRGTGIA-o-f_-S-li7ByGOZ3MdAJuN-hXafLlhhoX0Rl3qK0lOdFThGdbFLYVnFZiFPgF8RswCjSiGWUDf82Ahu3QO047QcsxLE-sJ6fbh7Dumz1z5diu41LdzxYR0I_comrtq8yyOQ",
        "e": "AQAB",
        "kid": "sorface-passport-key",
        "qi": "j4ZsQQLsoDY9sf2ctN8aGARwbIDcIlgZpBK2FdqTutJvBBf53gZ8C7MHbq-BlUnUQY8SGdMbN0cGrq_VimCxNQEm5inehh6XMpXNuNw7Bp1pPipM1UPAWk5m9_lei-9uTK4-fiTRhZHTjW4GlI0qFGpUOBLdHPjS3GLl8s6hkgA",
        "dp": "D3LtzGCMKcfqZwrPzdMgj3wdBwoXsDCOTYTAl28jK-VrRecg8VJj5p34FEJ6ELNM7egLnrj3B5euUFthtPjZQO7AJvLYjZBkpL4iTikLytxWCk2-Y7xJl4iYfOm0s-CThIxxRP2Nka3senpXbEy4ii-lmdzWJb-nynrtJLPjbfk",
        "alg": "RS256",
        "dq": "rorjB91YvBTQYxpa_7yK1koEuO-jxDvYzVG72aPm_DHDQIIjseCwwxWCRPmG2fzX44fknQHhsVmbx7TiXuIJ3c_rH-TfAf4eRn-_wmIJks_6UB3msXeEZMswzODHE8L45NgwAO6ckCuNYn8ZdmuWZczzWFanQc4NWosAdx5oy3k",
        "n": "m6v1iJdM0_U0S92DtIm_Hw3sDccrZ4RsF-cxH9y2p7wCT4Ia5DwgK9WEtCPbwLOfHmob-DPBcxrONFXjZTJlqEliTQX6K9Om1O-S8VTdr2aUE0eIwti7HSRpFl3vY7qnGPREqoe94jbhCFNulSdDRuzXwQxoEZaK0hBPAX1b_XjDq9l8PbVrEpyAPkgKA_LsUAuMS40FMFQA2NCsqljhWkUjfSDtskv59Ki8wLQy4cOM1dyvtXEEqEh-kNJofKEp6MtDlNqt8WTu3p1cyznVfGDY9kYnmSB2zIH071BhSEXqIb-tEq2nyhdVrGzyUBN623WlBIGRSXOfLlbfWr5-Vw"
      }